<?php

namespace Vinelab\NeoEloquent\Query;

use function array_key_exists;
use function compact;
use function debug_backtrace;
use const DEBUG_BACKTRACE_PROVIDE_OBJECT;
use Illuminate\Database\Query\Expression;

class Builder extends \Illuminate\Database\Query\Builder
{
    public function where($column, $operator = null, $value = null, $boolean = 'and'): self
    {
        // Horrible hack to make sure the where Count query does not become
        // a sql expression hard coded into the laravel query builder.
        if ($column instanceof Expression) {
            $stack = debug_backtrace(DEBUG_BACKTRACE_PROVIDE_OBJECT, 3);
            if (array_key_exists(2, $stack) && $stack[2]['function'] === 'addWhereCountQuery' && isset($stack[2]['args'])) {
                $query = $stack[2]['args'][0];
                $value = $stack[2]['args'][2];
                $operator = $stack[2]['args'][1];
                $boolean = $stack[2]['args'][3];

                $type = 'Count';
                $this->wheres[] = compact('type', 'query', 'operator', 'value', 'boolean');
                $this->addBinding($query->getBindings(), 'where');
            }

            return $this;
        }

        return parent::where($column, $operator, $value, $boolean); // TODO: Change the autogenerated stub
    }

    public function getBindings(): array
    {
        // bindings are taken care of at the grammar level
        return [];
    }

    public function addBinding($value, $type = 'where'): Builder
    {
        // bindings are taken care of at the grammar level
        return $this;
    }

    public function insert(array $values): bool
    {
        parent::insert($values);

        // The result might be a summarized result as the connection insert get id hack requires it.
        return true;
    }
}
